name: release

on:
  workflow_run:
    workflows: ["tests & lints"]
    branches: "**"
    types:
      - completed
  push:
    paths:
      - Dockerfile
      - app/**
      - tests/**
      - pyproject.toml
      - poetry.lock

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.10.10"
  POETRY_VERSION: "1.5.1"
  GH_TOKEN: ${{ vars.GH_TOKEN }}

jobs:
  semantic_release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}


  publish_image:
    runs-on: ubuntu-latest
    needs: [semantic_release]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/training_api:${{ github.ref }}


  publish_package:
    runs-on: ubuntu-latest
    needs: [semantic_release]

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: install poetry
      run: pipx install poetry==${{ env.POETRY_VERSION }}

    - name: set up python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'poetry'
    - run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

    - name: publish to pypi
      run: poetry publish --build
